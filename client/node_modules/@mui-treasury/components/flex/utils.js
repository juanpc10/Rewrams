"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLowerMediaQuery = exports.gapToCss = void 0;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

// @ts-ignore
var gapToCss = function gapToCss(theme) {
  return function (gutter) {
    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (val) {
      return val;
    };
    if (typeof gutter === 'undefined' || gutter === null) return undefined;
    var bp = theme.breakpoints,
        spacing = theme.spacing;

    if (typeof gutter === 'string') {
      return callback(gutter);
    }

    if (typeof gutter === 'number') {
      return callback(spacing(gutter));
    }

    return Object.entries(gutter).reduce(function (result, current) {
      return _extends(_extends({}, result), {}, _defineProperty({}, bp.up(current[0]), gapToCss(theme)(current[1], callback)));
    }, {});
  };
};

exports.gapToCss = gapToCss;

var getLowerMediaQuery = function getLowerMediaQuery(_ref, bp) {
  var breakpoints = _ref.breakpoints;

  if (typeof bp === 'string') {
    return breakpoints.down(breakpoints.keys[breakpoints.keys.indexOf(bp) - 1]);
  }

  return breakpoints.down(bp);
};

exports.getLowerMediaQuery = getLowerMediaQuery;